
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "8130338207:AAE-a-t1HKjKDxxu9xmUG98-nfYulRVCDcU"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöó –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ (Aleado)")],
    ],
    resize_keyboard=True
)

class CarSearch(StatesGroup):
    waiting_for_make = State()
    waiting_for_model = State()
    waiting_for_year_from = State()
    waiting_for_year_to = State()

# --- –ó–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ Aleado ---
def fake_parse_aleado_stats(make, model, year_from, year_to):
    # –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Aleado
    example_data = [
        {"–¥–∞—Ç–∞": "2024-06-01", "–æ—Ü–µ–Ω–∫–∞": "4", "—Ü–µ–Ω–∞": 580000},
        {"–¥–∞—Ç–∞": "2024-06-04", "–æ—Ü–µ–Ω–∫–∞": "3.5", "—Ü–µ–Ω–∞": 610000},
        {"–¥–∞—Ç–∞": "2024-06-08", "–æ—Ü–µ–Ω–∫–∞": "4", "—Ü–µ–Ω–∞": 595000},
        {"–¥–∞—Ç–∞": "2024-06-12", "–æ—Ü–µ–Ω–∫–∞": "4.5", "—Ü–µ–Ω–∞": 620000},
        {"–¥–∞—Ç–∞": "2024-06-15", "–æ—Ü–µ–Ω–∫–∞": "3.5", "—Ü–µ–Ω–∞": 570000},
    ]
    —Å—Ä–µ–¥–Ω—è—è = int(sum(x["—Ü–µ–Ω–∞"] for x in example_data) / len(example_data))
    return example_data, —Å—Ä–µ–¥–Ω—è—è

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ Aleado. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=menu)

@dp.message(lambda message: message.text == "üöó –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ (Aleado)")
async def start_car_search(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Honda):")
    await state.set_state(CarSearch.waiting_for_make)

@dp.message(CarSearch.waiting_for_make)
async def car_make_received(message: Message, state: FSMContext):
    await state.update_data(make=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Civic):")
    await state.set_state(CarSearch.waiting_for_model)

@dp.message(CarSearch.waiting_for_model)
async def car_model_received(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –û–¢:")
    await state.set_state(CarSearch.waiting_for_year_from)

@dp.message(CarSearch.waiting_for_year_from)
async def car_year_from_received(message: Message, state: FSMContext):
    await state.update_data(year_from=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –î–û:")
    await state.set_state(CarSearch.waiting_for_year_to)

@dp.message(CarSearch.waiting_for_year_to)
async def car_year_to_received(message: Message, state: FSMContext):
    data = await state.update_data(year_to=message.text)
    await state.clear()

    make = data['make']
    model = data['model']
    year_from = data['year_from']
    year_to = data['year_to']

    await message.answer(
        f"<b>üîç –ü–æ–∏—Å–∫:</b>\n–ú–∞—Ä–∫–∞: {make}\n–ú–æ–¥–µ–ª—å: {model}\n–ì–æ–¥: {year_from}‚Äì{year_to}\n\n–ü–∞—Ä—Å–∏–º Aleado..."
    )

    results, avg_price = fake_parse_aleado_stats(make, model, year_from, year_to)

    text = "<b>üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:</b>\n\n"
    for r in results:
        text += f"{r['–¥–∞—Ç–∞']}: –æ—Ü–µ–Ω–∫–∞ {r['–æ—Ü–µ–Ω–∫–∞']}, —Ü–µ–Ω–∞ {r['—Ü–µ–Ω–∞']:,} ¬•\n"
    text += f"\n<b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {avg_price:,} ¬•"

    await message.answer(text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
